# -*- coding: utf-8 -*-
"""Webinar Prompt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ZLc7rPrpFWy02LH4u519HlPLM_MfYmj

# Оценка качества звонков

1. *.mp3 - записи звонков
2. Расшифровать звонок, и превратить его в текст
3. Мы отдаем текс в GPT, он делает оценку согластно чек листу
4. Сделать отчет
"""

!pip install openai

from openai import OpenAI
from google.colab import userdata

OpenAI_api_key = userdata.get('OpenAI_api_key')
client = OpenAI(api_key=OpenAI_api_key)

file_name = "/content/2024-06-25_[18_48_41]_112.mp3"

with open(file_name, "rb") as audio_file:
    transcription = client.audio.transcriptions.create(
        model="whisper-1",
        file=audio_file,
        response_format="text",
        prompt="Зерокодер, Зерокодинг, нейросети, от принципов к практике"
    )

output_file_name = file_name.replace(".mp3", ".txt")

with open(output_file_name, "w") as text_file:
    text_file.write(transcription)

print(transcription)

print(f"Transcription saved to {output_file_name}")

with open("/content/prompt.txt", "r", encoding="utf-8") as file:
    system_prompt = file.read()

completion = client.chat.completions.create(
  model="gpt-3.5-turbo-0125",
  messages=[
    {"role": "system", "content": system_prompt},
    {"role": "user", "content": transcription}
  ]
)

evaluation_result = completion.choices[0].message.content

print(evaluation_result)

import json

sections = evaluation_result.strip().split("\n\n")
parsed_data = {}

for section in sections:
    lines = section.split("\n")
    title = lines[0].strip(":")
    grade = lines[1].split(": ")[1].strip(",")
    comment = lines[2].split(": ", 1)[1]
    parsed_data[title] = {
        "Оценка": grade,
        "Комментарий": comment
    }

json_data = json.dumps(parsed_data, ensure_ascii=False, indent=4)
print(json_data)

import json
import csv

data = json.loads(json_data)

csv_file_name = file_name.replace(".mp3", ".csv")

with open(csv_file_name, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)

    # Запись заголовков
    writer.writerow(["Этап", "Оценка", "Комментарии"])

    # Запись данных из JSON
    for key, value in data.items():
        writer.writerow([key, value["Оценка"], value["Комментарий"]])

print(f"Данные успешно сохранены в файл {csv_file_name}")

import requests
import time
from google.colab import userdata

def send_file(api_key, file_path, language, speakers):
    url = f'https://speech2text.ru/api/recognitions/task/file?api-key={api_key}'
    with open(file_path, 'rb') as file:
        files = {'file': file}
        params = {'lang': language, 'speakers': speakers}
        print(f"Отправка файла {file_path} на распознавание...")
        response = requests.post(url, files=files, params=params)
        data = response.json()
        task_id = data.get('id')
        print(f"Получен ID задачи: {task_id}")
        return task_id

def check_status(api_key, task_id):
    url = f'https://speech2text.ru/api/recognitions/{task_id}?api-key={api_key}'
    print(f"Проверка статуса для ID задачи: {task_id}")
    start_time = time.time()

    while True:
        response = requests.get(url)
        data = response.json()
        status = data.get('status', {}).get('code')
        elapsed_time = time.time() - start_time
        print(f"Прошло времени: {int(elapsed_time)} секунд. Файл распознается")
        if status == 200:
            print("\nЗадача успешно завершена.")
            break
        time.sleep(10)

    end_time = time.time()
    total_time = end_time - start_time
    print(f"Время, затраченное на транскрибацию: {total_time:.2f} секунд")

def get_result(api_key, task_id, format):
    url = f'https://speech2text.ru/api/recognitions/{task_id}/result/{format}?api-key={api_key}'
    response = requests.get(url)
    result = response.content.decode('utf-8')  # Декодируем байты в строку
    return result

if __name__ == "__main__":
    api_key = userdata.get('api_key')
    file_path = file_name
    language = 'ru'
    speakers = 2
    format = 'txt'
    task_id = send_file(api_key, file_path, language, speakers)
    check_status(api_key, task_id)
    s2t_transcription = get_result(api_key, task_id, format)
    print(s2t_transcription)

    output_file_name = file_name.replace(".mp3", "s2t.txt")

    with open(output_file_name, "w") as text_file:
      text_file.write(s2t_transcription)

    print(f"Transcription saved to {output_file_name}")

with open("/content/prompt.txt", "r", encoding="utf-8") as file:
    system_prompt = file.read()

completion = client.chat.completions.create(
  model="gpt-4o",
  messages=[
    {"role": "system", "content": system_prompt},
    {"role": "user", "content": s2t_transcription}
  ]
)

evaluation_result = completion.choices[0].message.content

print(evaluation_result)

import json

sections = evaluation_result.strip().split("\n\n")
parsed_data = {}

for section in sections:
    lines = section.split("\n")
    title = lines[0].strip(":")
    grade = lines[1].split(": ")[1].strip(",")
    comment = lines[2].split(": ", 1)[1]
    parsed_data[title] = {
        "Оценка": grade,
        "Комментарий": comment
    }

json_data = json.dumps(parsed_data, ensure_ascii=False, indent=4)
print(json_data)

import json
import csv

data = json.loads(json_data)

csv_file_name = file_name.replace(".mp3", "s2t.csv")

with open(csv_file_name, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)

    # Запись заголовков
    writer.writerow(["Этап", "Оценка", "Комментарии"])

    # Запись данных из JSON
    for key, value in data.items():
        writer.writerow([key, value["Оценка"], value["Комментарий"]])

print(f"Данные успешно сохранены в файл {csv_file_name}")